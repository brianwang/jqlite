#summary Supported functionality in jQLite

= Quick Summary of Supported Features =

jQLite establishes itself as "jQuery" and also exposes the "$" constructor.  You cannot use jQuery and jQLite together on a page.  Since this is intended to be a stand-in for jQuery, it isn't going to support all of the features of jQuery.  This is intended to be a close match to simple functionality needed on a mobile device.  The main focus was element selection, CSS manipulation, AJAX/AHAH, and some event handling.  Things like animation don't make as much sense due to the limited power of some mobile devices.

If you develop your web app to use jQuery in its most simplest way, you should be able to upgrade to jQuery when mobile devices can handle it fully.  As it stands, the only mobile browser which this was intended for (!BlackBerry) will soon be updated to a !WebKit implementation.

== Supported Selectors ==

The following are the types of selectors currently implemented.  The selectors are implemented using straightforward !JavaScript since regular expressions across browsers aren't consistent:

  * Id selectors: #foo
  * Element selectors: div, span, etc...
  * Class selectors: .bar, .baz
  * Multiple class selectors: “div.button.jq”
  * Descendant selectors: “div.jq span.hotlink”

== Supported Methods ==

A small subset of the operations which jQuery supports are currently implemented.  All of them are implemented using the chained operation syntax of jQuery. e.g:
{{{
   $("div.foo").each(function() {
      $(this).removeClass("foo").addClass("bar");
   });
}}}

Supported methods:

  * .each(function...)
  * .addClass(name)
  * .removeClass(name)
  * .toggleClass(name)
  * .css(name) _getter_
  * .css(name, value) _setter_
  * .css(obj) _multi-property setter_
  * .show(callbackFunction...)
  * .hide(callbackFunction...)
  * .hasClass(name)
  * .html(htmltext)
  * .parent()
  * .append(obj)
  * .remove()
  * .remove(filter)
  * .empty()
  * .val() _getter_
  * .val(value) _setter_
  * .attr(name) _getter_
  * .attr(name, value) _setter_
  * .attr(obj) _multi-attribute setter_
  * .bind(eventName, function...)
  * .trigger(eventName, (array))
  * .extend(obj)

Event Handlers:

  * .click(function...)
  * .mouseover(function...)
  * .mouseout(function...)
  * .mouseup(function...)
  * .mousedown(function...)
  * .change(function...)
  * .focus(function...)
  * .blur(function...)
  * .submit(function...)

AHAH:

  * .load(url, params, function...)

== Element Creation ==

You can create elements on the fly by calling jQuery with some HTML as the argument:

{{{
   var div = $("<div class='foo'>");
   div.addClass("bar");
}}}

== Document Ready Functionality ==

In addition to the methods above, you can use the document-ready functionality as either:

  * jQuery(document).ready(function...)
  * jQuery(function...)

{{{
   $(document).ready(function() {
      alert("The document is now ready!");
   });
}}}

== Events ==

The event engine is implemented to be as simple as possible.  It isn't a direct match for the jQuery event engine.  Binding of browser events (click, mouseover, mouseout, etc.) is done through `addEventListener()`, but custom events are supported as well.  The difference is that for browser events, the `Event` object is the only argument passed to the event handler.  Any data associated with a `.trigger()` is passed as a "data" field on the `Event` object.  For custom events, the "data" is passed as an array to the handler.

== Extending jQLite ==

jQLite now supports extensions.  Just like jQuery, you can extend a plain !JavaScript object, `jQuery`, or `jQuery.fn`.  This allows you to create extensions to jQLite.  The extensions can still only use the methods available above, but you should be able to implement simple extensions.

There's an example extension on the [http://code.google.com/p/jqlite/w/list Wiki] for an Accordian group.